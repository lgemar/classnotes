9/11 -> Lecture Notes:
/* Integer arithmetic: b - a -> normal math result
 * Pointer Arithmetic: b - a with type T* -> 
 * 	(uintptr_t b - uintptr_a) / sizeof(T*)
 * You can only subtract pointers that are of the same type.
 */

 Alignment of T:
 A such that every object of type T has address multiple of A.

 type    size    alignment
 char	 1 		 1
 int	 4	     4
 
This is especially important for structures. A structure like the 
following: 
typedef struct mem {
	int a;
	char b;
	int c;
} mem;
will actually allocate 12 bytes.

Let's say your struct looks like this:
typedef struct mem2 {
	int a;
	char b;
}
This struct will have to be of size 8.
The alignment is the least common multiple of the alignments
of the components. The size has to be a multiple of the alignment.

Facts about alignment and structures:
1.sizeof(T) is a multiple of alignof(T). And the reason of this is
array layout.
2. Alignof(struct M) is the max{Alignof(T)} (true because each
alignment is a power of 2) for all 
components T.

9/8 -> Section notes: 
MY LAPTOP:
git add FILE // local file system -> staging area
git reset FILE // remove from staging area
git commit -a //automatically adds and commits files that were added in a previous commit
git commit //takes a snapshot of your local repository

CODE.SEAS = remote repository (e.g. "origin")
git push <remote> <branch>
git pull <remote> <branch>

USEFUL COMMANDS:
git status //displays a list of files you've changed
git diff //view any differences between your repository and the latest commit
git log //list of all your commits (--graph --oneline --branches --decorate --all)
git push <remote-name> <branch-on-remote>

9/4: 
abstract machine: the meaning of a program in a high level language
	-who defines the operation of a abstract machine? Old farts. 
real machine: the meaning of a program executed on real Hardware
The life of a program: 
Brain codes -> High level language -> compiler -> machine instructions -> 
processor(CPU + memory + disk + screen) -> meaning

...Sometime a program can have "undefined behavior". The compiler can find 
undefined behavior in a program...It's possible to write programs that have 
no meaning at all...what the hell is the compiler doing when it optimizes...

Compilers think about MEANING of your program...how do we avoid the undefined
behavior...

How do you debug a program that is generating undefined behavior? 

Dynamically allocated objects: can outlive the function they were created in
	-they last for the entire time between main and free
	
Compiler fixes the location of global variables, but stack and heap addresses
are changing rapidly...making it harder to hack into your computer!

| globals -------- heap ->           <-stack | locals                 | 

Operating system ensures that read-only variable cannot be modified. 
