11/18: 
Goals for the day: 
1) Finish shell programming
2) Network and server programming

Review and Motivation: waittimeout.c
Disadvantage of running loop to wait for child process to exit. The code has bad utilization because it uses polling. 

==> Utilization: Fraction of some resource devoted to useful work -- a number
	between 0 and 1 -- bigger is better 
	: Who decides what is useful? 
	: From the kernel's perspective, what is useful and what is not useful? 
		Useful work is when a process is running -- the kernel's goal is to run
		processes. A kernel does not look into a process to determine whether 
		useful or useless work is being done.
	: BUT...we know that we are just running a busy-loop...not very useful...
		--> however...we are useing a busy-loop because we don't want race-conds
	: waitblock.c 
		--> Blocking model as opposed to polling model
		--> we can use interupt functionality to implement blocking
		--> This has very good utilization functionality -- there is less 
			useless work being done
	: BUT blocking code has a race condition...
		--> Where is the race condition in the blocking code? 
			: if the child exits before we call sleep, then the interrupt will
				never happen, and parent will sleep for the whole sleep time
				even though the child has exited

==> Sleep-Wakeup Race: Wake up (stop blocking) when an event occurs...BUT we 
	cannot detect the event & sleep atomically
	: Atomic code executes indivisibly, without interruption
	: Could we put interrupts "on ice" to block signals? how about SIGBLOCK, 
		try running man SIGBLOCK to check out some of the functionality!
	: we can unblock the signal right before we sleep? The race condition 
		still exists, even if less likely this time
	: Here is suggestion... what if we were to call select...or PSELECT
	: PSELECT -> generic way to go to sleep for an amount of time, a SIGMASK 
		parameter combines the checking for an event and going to sleep as an
		atomic operation
		--> this prevents the race condition that something happens between
			checking for an interupt and going to sleep -- pselect makes sure
			that this check and going to sleep is autonomous
	: We fixed it! In waitblocksafe.c, using a pipe
	: How can you get around that race condition? 
		--> The solution to the sleep-wakeup race is to make sure you sleep
			before you wakeup in every case

==> How can you deal with interrupts in the shell?
	: 1 set up foreground pipeline;
	  2 if(shell got ctrl-C) kill fg pipeline; // wakeup equivalent
	  3 // if the user pushes ctrl-C here there is a problem, a race-condition
	  4 put fg pipeline in foreground;
	  5 wait for foregroun pipeline; // sleep equivalent
	: reorder lines 2 and 4 to solve this problem, the child will get ctrl-C

==> General rule: signals are not reliable

==> Zombie Processes: a child process that was never waited for and is still 
	taking up resources; process died, parent not waited yet
	: There is always a process that waits for a spawned process, even if the
		parent process has died
	: There is an uber process called init (has process id 1), and when the
		parent of a child dies, the system reparents the child to init
	: "pstree" command shows you a tree of all processes and their children on
		the system
	: shell --> a program whose job it is to run other programs

==> Networking: one machine can use the resources of other machines
	: division of computers into roles -> clients vs servers
	: Message sequence diagram

client(active party)		server			client
request ------							 --	req
			  ------------> 
			  ------------	response<----
		<-----

	: service client and service servers
	: What is the difference between servers and clients?
	: An idea of messages between channels is maybe well represented by a pipe?
		--> however in this case we need a file descriptor that represents a 
			future channel -- the system call we need is socket, and it creates
			an edgepoint for communication -- it's a network file descriptor
	: socket creates an endpoint and connect binds them together

client 		server
socket()	socket() -- well known endpoint

connect()--> 
	: Three step process on client side: 
		1.) look up address, 
		2.) create a socket, 
		3.) connect
	: Server side: 
		1.) Create socket and set up options on that socket
		2.) Bind socket to a port
		3.) listen for new connections
	: We do not use listening sockets for connections, accept() solves the race
		condition problem that might arise
		--> accept() takes in a listening file descriptor and returns a new
			file descriptor for the connection -- the connected socket is then
			bound to the client
	: walk through of serviceserver-01.c
		--> it's bad because it can only talk to one client at a time

==> Denial of Service Attack: one user of a service can prevent anyone else
	from using a service -- attacker isn't gaining things directly, but prevent
	other people from getting services
	: Next time -- we will fix it! 

10/21: 
==> Caller Saved Registers: callee can modify without saving or restoring
	: garbage at the entrance of the function
	: eax, ecx, edx
	: %eax stores the return value of the function
==> Callee Saved Registers: callee must restore the original value
	: must be saved by the callee if the callee wants to use
	: ebx, esi, edi, eip, esp, ebp
==> Currently running function always has the top of the stack
==> Caller saves its variables above the top of the stack
	: Callee saves its variables below the top of the stack
==> f51.c
	: why does g have no arguments? 
		--> Not initiazing space with anything
	: Stack is always aligned to a multiple of 16
==> Positive offsets of %esp are the next guys arguments
==> Negative offsets off of %ebp are our local variables
==> positive offsets off of %ebp are our arguments
==> "leave" pops %ebp

9/11 -> Lecture Notes:
/* Integer arithmetic: b - a -> normal math result
 * Pointer Arithmetic: b - a with type T* -> 
 * 	(uintptr_t b - uintptr_a) / sizeof(T*)
 * You can only subtract pointers that are of the same type.
 */

 Alignment of T:
 A such that every object of type T has address multiple of A.

 type    size    alignment
 char	 1 		 1
 int	 4	     4
 
This is especially important for structures. A structure like the 
following: 
typedef struct mem {
	int a;
	char b;
	int c;
} mem;
will actually allocate 12 bytes.

Let's say your struct looks like this:
typedef struct mem2 {
	int a;
	char b;
}
This struct will have to be of size 8.
The alignment is the least common multiple of the alignments
of the components. The size has to be a multiple of the alignment.

Facts about alignment and structures:
1.sizeof(T) is a multiple of alignof(T). And the reason of this is
array layout.
2. Alignof(struct M) is the max{Alignof(T)} (true because each
alignment is a power of 2) for all 
components T.

9/8 -> Section notes: 
MY LAPTOP:
git add FILE // local file system -> staging area
git reset FILE // remove from staging area
git commit -a //automatically adds and commits files that were added in a previous commit
git commit //takes a snapshot of your local repository

CODE.SEAS = remote repository (e.g. "origin")
git push <remote> <branch>
git pull <remote> <branch>

USEFUL COMMANDS:
git status //displays a list of files you've changed
git diff //view any differences between your repository and the latest commit
git log //list of all your commits (--graph --oneline --branches --decorate --all)
git push <remote-name> <branch-on-remote>

9/4: 
abstract machine: the meaning of a program in a high level language
	-who defines the operation of a abstract machine? Old farts. 
real machine: the meaning of a program executed on real Hardware
The life of a program: 
Brain codes -> High level language -> compiler -> machine instructions -> 
processor(CPU + memory + disk + screen) -> meaning

...Sometime a program can have "undefined behavior". The compiler can find 
undefined behavior in a program...It's possible to write programs that have 
no meaning at all...what the hell is the compiler doing when it optimizes...

Compilers think about MEANING of your program...how do we avoid the undefined
behavior...

How do you debug a program that is generating undefined behavior? 

Dynamically allocated objects: can outlive the function they were created in
	-they last for the entire time between main and free
	
Compiler fixes the location of global variables, but stack and heap addresses
are changing rapidly...making it harder to hack into your computer!

| globals -------- heap ->           <-stack | locals                 | 

Operating system ensures that read-only variable cannot be modified. 
